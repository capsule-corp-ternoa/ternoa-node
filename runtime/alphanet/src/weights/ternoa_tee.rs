
//! Autogenerated weights for `ternoa_tee`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-30, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ternoa-Recommended-Reference-Machine`, CPU: `AMD EPYC 7281 16-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("mainnet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/ternoa
// benchmark
// pallet
// --chain
// alphanet-dev
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./weights/
// --pallet=ternoa_tee

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `ternoa_tee`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> ternoa_tee::WeightInfo for WeightInfo<T> {
    // Storage: TEE EnclaveRegistrations (r:1 w:1)
    // Storage: TEE EnclaveData (r:1 w:0)
    // Storage: TEE EnclaveAccountOperator (r:1 w:0)
    // Storage: TEE StakingAmount (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: TEE StakingLedger (r:0 w:1)
	fn register_enclave() -> Weight {
        Weight::from_parts(86_901_000 , 0)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    // Storage: TEE StakingAmount (r:1 w:0)
    // Storage: TEE EnclaveData (r:1 w:0)
    // Storage: TEE EnclaveUnregistrations (r:1 w:1)
    // Storage: TEE StakingLedger (r:1 w:1)
    fn unregister_enclave() -> Weight {
        Weight::from_parts(57_690_000 , 0)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: TEE EnclaveData (r:1 w:0)
    // Storage: TEE EnclaveUpdates (r:1 w:1)
    // Storage: TEE EnclaveAccountOperator (r:1 w:0)
    fn update_enclave() -> Weight {
        Weight::from_parts(50_160_000 , 0)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: TEE EnclaveUpdates (r:1 w:1)
    fn cancel_update() -> Weight {
        Weight::from_parts(38_901_000 , 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: TEE EnclaveRegistrations (r:1 w:1)
    // Storage: TEE ClusterData (r:1 w:1)
    // Storage: TEE EnclaveAccountOperator (r:1 w:1)
    // Storage: TEE EnclaveData (r:1 w:1)
    // Storage: Staking ActiveEra (r:1 w:0)
    // Storage: TEE OperatorAssignedEra (r:0 w:1)
    // Storage: TEE EnclaveClusterId (r:0 w:1)
    fn assign_enclave() -> Weight {
        Weight::from_parts(67_690_000 , 0)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    // Storage: TEE EnclaveRegistrations (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn remove_registration() -> Weight {
        Weight::from_parts(64_001_000 , 0)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: TEE EnclaveUpdates (r:1 w:1)
    fn reject_update() -> Weight {
        Weight::from_parts(37_450_000 , 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
	// Storage: TEE EnclaveData (r:1 w:1)
	// Storage: TEE EnclaveAccountOperator (r:1 w:1)
	// Storage: TEE EnclaveClusterId (r:1 w:1)
	// Storage: TEE ClusterData (r:1 w:1)
	// Storage: TEE EnclaveUpdates (r:1 w:1)
	fn force_remove_enclave() -> Weight {
        Weight::from_parts(183_441_000 , 0)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(8))
    }
    // Storage: TEE EnclaveData (r:1 w:1)
    // Storage: TEE EnclaveAccountOperator (r:1 w:1)
    // Storage: TEE EnclaveUpdates (r:1 w:1)
    fn force_update_enclave() -> Weight {
        Weight::from_parts(75_411_000 , 0)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: TEE NextClusterId (r:1 w:1)
    // Storage: TEE ClusterData (r:0 w:1)
    fn create_cluster() -> Weight {
        Weight::from_parts(41_310_000 , 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: TEE ClusterData (r:1 w:1)
    fn update_cluster() -> Weight {
        Weight::from_parts(30_350_000 , 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: TEE ClusterData (r:1 w:1)
    fn remove_cluster() -> Weight {
        Weight::from_parts(29_691_000 , 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: TEE StakingLedger (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: TEE StakingAmount (r:1 w:0)
    fn withdraw_unbonded() -> Weight {
        Weight::from_parts(59_530_000 , 0)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: TEE MetricsServers (r:1 w:1)
    fn register_metrics_server() -> Weight {
        Weight::from_parts(30_801_000 , 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: TEE MetricsServers (r:1 w:1)
    fn unregister_metrics_server() -> Weight {
        Weight::from_parts(36_381_000 , 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: TEE MetricsServers (r:1 w:1)
    fn force_update_metrics_server_type() -> Weight {
        Weight::from_parts(36_470_000 , 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: TEE MetricsServers (r:1 w:0)
    // Storage: TEE EnclaveData (r:1 w:0)
    // Storage: Staking ActiveEra (r:1 w:0)
    // Storage: TEE MetricsReports (r:1 w:1)
    fn submit_metrics_server_report() -> Weight {
        Weight::from_parts(58_101_000 , 0)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: TEE ReportParamsWeightages (r:0 w:1)
    fn set_report_params_weightage() -> Weight {
        Weight::from_parts(32_190_000 , 0)
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: TEE StakingAmount (r:0 w:1)
    fn set_staking_amount() -> Weight {
        Weight::from_parts(32_220_000 , 0)
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: TEE DailyRewardPool (r:0 w:1)
    fn set_daily_reward_pool() -> Weight {
        Weight::from_parts(32_201_000 , 0)
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: TEE ClaimedRewards (r:1 w:1)
    // Storage: Staking ActiveEra (r:1 w:0)
    // Storage: TEE OperatorAssignedEra (r:1 w:0)
    // Storage: TEE EnclaveData (r:2 w:0)
    // Storage: TEE DailyRewardPool (r:1 w:0)
    // Storage: TEE MetricsReports (r:1 w:0)
    // Storage: System Account (r:2 w:2)
    fn claim_rewards() -> Weight {
        Weight::from_parts(154_782_000 , 0)
            .saturating_add(T::DbWeight::get().reads(9))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: TEE OperatorAssignedEra (r:1 w:1)
    fn update_operator_assigned_era() -> Weight {
        Weight::from_parts(37_040_000 , 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
	// Storage: TEE StakingAmount (r:1 w:0)
    // Storage: TEE StakingLedger (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn bond_extra() -> Weight {
        Weight::from_parts(73_730_000 , 0)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: TEE StakingAmount (r:1 w:0)
    // Storage: TEE StakingLedger (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn refund_excess() -> Weight {
        Weight::from_parts(68_810_000 , 0)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }

}

