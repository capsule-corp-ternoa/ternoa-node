
//! Autogenerated weights for `ternoa_tee`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-30, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ternoa-Recommended-Reference-Machine`, CPU: `AMD EPYC 7281 16-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("mainnet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/ternoa
// benchmark
// pallet
// --chain
// alphanet-dev
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./weights/
// --pallet=ternoa_tee

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `ternoa_tee`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> ternoa_tee::WeightInfo for WeightInfo<T> {
     // Storage: TEE EnclaveRegistrations (r:1 w:1)
    // Storage: TEE EnclaveData (r:1 w:0)
    // Storage: TEE EnclaveAccountOperator (r:1 w:0)
    // Storage: TEE StakingAmount (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: TEE StakingLedger (r:0 w:1)
    fn register_enclave() -> Weight {
        Weight::from_ref_time(82_930_000 as u64)
            .saturating_add(T::DbWeight::get().reads(6 as u64))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
    }
    // Storage: TEE StakingAmount (r:1 w:0)
    // Storage: TEE EnclaveData (r:1 w:0)
    // Storage: TEE StakingLedger (r:0 w:1)
    fn unregister_enclave() -> Weight {
        Weight::from_ref_time(107_941_000 as u64)
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: TEE EnclaveData (r:1 w:0)
    // Storage: TEE EnclaveUpdates (r:1 w:1)
    // Storage: TEE EnclaveAccountOperator (r:1 w:0)
    fn update_enclave() -> Weight {
        Weight::from_ref_time(65_591_000 as u64)
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: TEE EnclaveUpdates (r:1 w:1)
    fn cancel_update() -> Weight {
        Weight::from_ref_time(50_530_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: TEE EnclaveRegistrations (r:1 w:1)
    // Storage: TEE ClusterData (r:1 w:1)
    // Storage: TEE EnclaveAccountOperator (r:1 w:1)
    // Storage: TEE EnclaveData (r:1 w:1)
    // Storage: TEE EnclaveClusterId (r:0 w:1)
    fn assign_enclave() -> Weight {
        Weight::from_ref_time(135_892_000 as u64)
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
    }
   // Storage: TEE EnclaveRegistrations (r:1 w:1)
   fn remove_registration() -> Weight {
	Weight::from_ref_time(80_101_000 as u64)
		.saturating_add(T::DbWeight::get().reads(1 as u64))
		.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: TEE EnclaveUpdates (r:1 w:1)
	fn remove_update() -> Weight {
		Weight::from_ref_time(49_860_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: TEE EnclaveData (r:1 w:1)
	// Storage: TEE EnclaveAccountOperator (r:1 w:1)
	// Storage: TEE EnclaveClusterId (r:1 w:1)
	// Storage: TEE ClusterData (r:1 w:1)
	// Storage: TEE EnclaveUpdates (r:1 w:1)
	fn remove_enclave() -> Weight {
		Weight::from_ref_time(80_180_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: TEE EnclaveData (r:1 w:1)
	// Storage: TEE EnclaveAccountOperator (r:1 w:1)
	// Storage: TEE EnclaveUpdates (r:1 w:1)
	fn force_update_enclave() -> Weight {
		Weight::from_ref_time(50_281_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: TEE NextClusterId (r:1 w:1)
	// Storage: TEE ClusterData (r:0 w:1)
	fn create_cluster() -> Weight {
		Weight::from_ref_time(29_040_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: TEE ClusterData (r:1 w:1)
	fn update_cluster() -> Weight {
		Weight::from_ref_time(29_500_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: TEE ClusterData (r:1 w:1)
	fn remove_cluster() -> Weight {
		Weight::from_ref_time(29_070_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
     // Storage: TEE StakingLedger (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: TEE StakingAmount (r:1 w:0)
    fn withdraw_unbonded() -> Weight {
        Weight::from_ref_time(131_891_000 as u64)
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    // Storage: TEE MetricsServers (r:1 w:1)
    fn register_metrics_server() -> Weight {
        Weight::from_ref_time(69_001_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: TEE MetricsServers (r:1 w:0)
    // Storage: TEE EnclaveData (r:1 w:0)
    // Storage: TEE MetricsReports (r:1 w:1)
    fn submit_metrics_server_report() -> Weight {
        Weight::from_ref_time(70_251_000 as u64)
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: TEE ReportParamsWeightages (r:0 w:1)
    fn set_report_params_weightage() -> Weight {
        Weight::from_ref_time(31_831_000 as u64)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: TEE StakingAmount (r:0 w:1)
    fn set_staking_amount() -> Weight {
        Weight::from_ref_time(31_430_000 as u64)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: TEE DailyRewardPool (r:0 w:1)
    fn set_daily_reward_pool() -> Weight {
        Weight::from_ref_time(31_501_000 as u64)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: Staking ActiveEra (r:1 w:0)
    // Storage: TEE EnclaveData (r:2 w:0)
    // Storage: TEE DailyRewardPool (r:1 w:0)
    // Storage: TEE MetricsReports (r:1 w:0)
    // Storage: System Account (r:2 w:2)
    // Storage: TEE ClaimedRewards (r:0 w:1)
    fn claim_rewards() -> Weight {
        Weight::from_ref_time(102_370_000 as u64)
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
}

