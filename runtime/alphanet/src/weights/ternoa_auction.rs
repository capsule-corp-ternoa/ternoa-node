
//! Autogenerated weights for `ternoa_auction`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ternoa-Recommended-Reference-Machine`, CPU: `AMD EPYC 7281 16-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("alphanet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/ternoa
// benchmark
// pallet
// --chain=alphanet-dev
// --steps=50
// --repeat=20
// --pallet=ternoa_auction
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `ternoa_auction`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> ternoa_auction::WeightInfo for WeightInfo<T> {
	// Storage: NFT Nfts (r:1 w:1)
	// Storage: Marketplace Marketplaces (r:1 w:0)
	// Storage: Auction Deadlines (r:1 w:1)
	// Storage: Auction Auctions (r:0 w:1)
	/// The range of component `s` is `[0, 999998]`.
	fn create_auction(s: u32, ) -> Weight {
		Weight::from_parts(107_323_000 , 0)
			// Standard Error: 109
			.saturating_add(Weight::from_parts(34_273 , 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: NFT Nfts (r:1 w:1)
	// Storage: Auction Auctions (r:1 w:1)
	// Storage: Auction Deadlines (r:1 w:1)
	/// The range of component `s` is `[0, 999999]`.
	fn cancel_auction(s: u32, ) -> Weight {
		Weight::from_parts(69_049_000 , 0)
			// Standard Error: 64
			.saturating_add(Weight::from_parts(31_779 , 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: NFT Nfts (r:1 w:1)
	// Storage: Auction Auctions (r:1 w:1)
	// Storage: Marketplace Marketplaces (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Auction Claims (r:1 w:1)
	// Storage: Auction Deadlines (r:1 w:1)
	/// The range of component `s` is `[0, 999999]`.
	fn end_auction(s: u32, ) -> Weight {
		Weight::from_parts(138_922_000 , 0)
			// Standard Error: 65
			.saturating_add(Weight::from_parts(30_873 , 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Auction Auctions (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	/// The range of component `s` is `[0, 24]`.
	fn add_bid(s: u32, ) -> Weight {
		Weight::from_parts(91_723_000 , 0)
			// Standard Error: 72_254
			.saturating_add(Weight::from_parts(2_031_189 , 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Auction Auctions (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	/// The range of component `s` is `[0, 24]`.
	fn remove_bid(s: u32, ) -> Weight {
		Weight::from_parts(88_275_000 , 0)
			// Standard Error: 65_530
			.saturating_add(Weight::from_parts(1_283_005 , 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: NFT Nfts (r:1 w:1)
	// Storage: Auction Auctions (r:1 w:1)
	// Storage: Marketplace Marketplaces (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Auction Deadlines (r:1 w:1)
	/// The range of component `s` is `[0, 999999]`.
	fn buy_it_now(s: u32, ) -> Weight {
		Weight::from_parts(152_217_000 , 0)
			// Standard Error: 86
			.saturating_add(Weight::from_parts(32_130 , 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Auction Claims (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn claim() -> Weight {
		Weight::from_parts(123_441_000 , 0)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
