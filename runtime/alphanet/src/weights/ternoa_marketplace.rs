//! Autogenerated weights for `ternoa_marketplace`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ternoa-Recommended-Reference-Machine`, CPU: `AMD EPYC 7281 16-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("alphanet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/ternoa
// benchmark
// pallet
// --chain=alphanet-dev
// --steps=50
// --repeat=20
// --pallet=ternoa_marketplace
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{RefTimeWeight, Weight}};
use sp_std::marker::PhantomData;

/// Weight functions for `ternoa_marketplace`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> ternoa_marketplace::WeightInfo for WeightInfo<T> {
        // Storage: Marketplace MarketplaceMintFee (r:1 w:0)
        // Storage: System Account (r:1 w:1)
        // Storage: Marketplace NextMarketplaceId (r:1 w:1)
        // Storage: Marketplace Marketplaces (r:0 w:1)
        fn create_marketplace() -> Weight {
                Weight::from_ref_time(173_767_000 as RefTimeWeight)
                        .saturating_add(T::DbWeight::get().reads(3 as RefTimeWeight))
                        .saturating_add(T::DbWeight::get().writes(3 as RefTimeWeight))
        }
        // Storage: Marketplace Marketplaces (r:1 w:1)
        fn set_marketplace_owner() -> Weight {
                Weight::from_ref_time(51_348_000 as RefTimeWeight)
                        .saturating_add(T::DbWeight::get().reads(1 as RefTimeWeight))
                        .saturating_add(T::DbWeight::get().writes(1 as RefTimeWeight))
        }
        // Storage: Marketplace Marketplaces (r:1 w:1)
        fn set_marketplace_kind() -> Weight {
                Weight::from_ref_time(69_120_000 as RefTimeWeight)
                        .saturating_add(T::DbWeight::get().reads(1 as RefTimeWeight))
                        .saturating_add(T::DbWeight::get().writes(1 as RefTimeWeight))
        }
        // Storage: Marketplace Marketplaces (r:1 w:1)
        fn set_marketplace_configuration() -> Weight {
                Weight::from_ref_time(134_915_000 as RefTimeWeight)
                        .saturating_add(T::DbWeight::get().reads(1 as RefTimeWeight))
                        .saturating_add(T::DbWeight::get().writes(1 as RefTimeWeight))
        }
        // Storage: Marketplace MarketplaceMintFee (r:0 w:1)
        fn set_marketplace_mint_fee() -> Weight {
                Weight::from_ref_time(27_332_000 as RefTimeWeight)
                        .saturating_add(T::DbWeight::get().writes(1 as RefTimeWeight))
        }
        // Storage: NFT Nfts (r:1 w:1)
        // Storage: Marketplace Marketplaces (r:1 w:0)
        // Storage: Marketplace ListedNfts (r:0 w:1)
        fn list_nft() -> Weight {
                Weight::from_ref_time(69_251_000 as RefTimeWeight)
                        .saturating_add(T::DbWeight::get().reads(2 as RefTimeWeight))
                        .saturating_add(T::DbWeight::get().writes(2 as RefTimeWeight))
        }
        // Storage: NFT Nfts (r:1 w:1)
        // Storage: Marketplace ListedNfts (r:1 w:1)
        fn unlist_nft() -> Weight {
                Weight::from_ref_time(71_323_000 as RefTimeWeight)
                        .saturating_add(T::DbWeight::get().reads(2 as RefTimeWeight))
                        .saturating_add(T::DbWeight::get().writes(2 as RefTimeWeight))
        }
        // Storage: NFT Nfts (r:1 w:1)
        // Storage: Marketplace ListedNfts (r:1 w:1)
        // Storage: Marketplace Marketplaces (r:1 w:0)
        // Storage: System Account (r:2 w:2)
        fn buy_nft() -> Weight {
                Weight::from_ref_time(204_114_000 as RefTimeWeight)
                        .saturating_add(T::DbWeight::get().reads(5 as RefTimeWeight))
                        .saturating_add(T::DbWeight::get().writes(4 as RefTimeWeight))
        }
}
