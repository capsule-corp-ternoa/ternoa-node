[package]
name = "alphanet-runtime"
version.workspace = true
authors.workspace = true
edition.workspace = true
license.workspace = true
build = "build.rs"

[dependencies]
# Frame
frame-election-provider-support = { workspace = true, default-features = false }
frame-executive = { workspace = true, default-features = false }
frame-support = { workspace = true, default-features = false }
frame-system = { workspace = true, default-features = false }
frame-system-rpc-runtime-api = { workspace = true, default-features = false }
pallet-authority-discovery = { workspace = true, default-features = false }
pallet-authorship = { workspace = true, default-features = false }
pallet-babe = { workspace = true, default-features = false }
pallet-bags-list = { workspace = true, default-features = false }
pallet-balances = { workspace = true, default-features = false }
pallet-election-provider-multi-phase = { workspace = true, default-features = false }
pallet-grandpa = { workspace = true, default-features = false }
pallet-im-online = { workspace = true, default-features = false }
pallet-offences = { workspace = true, default-features = false }
pallet-preimage = { workspace = true, default-features = false }
pallet-session = { workspace = true, features = ["historical"], default-features = false }
pallet-staking = { workspace = true, default-features = false }
pallet-staking-reward-curve = { workspace = true, default-features = false }
pallet-timestamp = { workspace = true, default-features = false }
pallet-transaction-payment = { workspace = true, default-features = false }
pallet-transaction-payment-rpc-runtime-api = { workspace = true, default-features = false }
pallet-treasury = { workspace = true, default-features = false }
pallet-utility = { workspace = true, default-features = false }
pallet-collective = { workspace = true, default-features = false }
pallet-membership = { workspace = true, default-features = false }
pallet-scheduler = { workspace = true, default-features = false }
pallet-democracy = { workspace = true, default-features = false }
pallet-elections-phragmen = { workspace = true, default-features = false }
pallet-multisig = { workspace = true, default-features = false }
pallet-identity = { workspace = true, default-features = false }
pallet-assets = { workspace = true, default-features = false }

# Benchmarking
frame-benchmarking = { workspace = true, default-features = false, optional = true }
frame-system-benchmarking = { workspace = true, default-features = false, optional = true }
pallet-session-benchmarking = { workspace = true, default-features = false, optional = true }
pallet-offences-benchmarking = { workspace = true, default-features = false, optional = true }

# Try Runtime
frame-try-runtime = { workspace = true, default-features = false, optional = true }

# Substrate Primitives
sp-api = { workspace = true, default-features = false }
sp-authority-discovery = { workspace = true, default-features = false }
sp-block-builder = { workspace = true, default-features = false }
sp-consensus-babe = { workspace = true, default-features = false }
sp-core = { workspace = true, default-features = false }
sp-inherents = { workspace = true, default-features = false }
sp-io = { workspace = true, default-features = false }
sp-npos-elections = { workspace = true, default-features = false }
sp-offchain = { workspace = true, default-features = false }
sp-runtime = { workspace = true, default-features = false }
sp-session = { workspace = true, default-features = false }
sp-staking = { workspace = true, default-features = false }
sp-std = { workspace = true, default-features = false }
sp-tracing = { workspace = true, default-features = false }
sp-transaction-pool = { workspace = true, default-features = false }
sp-version = { workspace = true, default-features = false }

# Rest
parity-scale-codec = { default-features = false, features = ["derive", "max-encoded-len"], workspace = true }
scale-info = { workspace = true, default-features = false, features = ["derive"] }
serde = { workspace = true, optional = true }
static_assertions = { workspace = true }
log = { default-features = false, workspace = true}

# Ternoa
alphanet-runtime-constants = { package = "alphanet-runtime-constants", path = "./constants", default-features = false }
ternoa-core-primitives = { path = "../../core-primitives",  default-features = false }
ternoa-runtime-common = { package = "ternoa-runtime-common", path = "../common", default-features = false }
ternoa-mandate = { path = "../../ternoa-pallets/mandate", default-features = false }
ternoa-staking-rewards = { path = "../../ternoa-pallets/staking-rewards", default-features = false }
ternoa-bridge = { path = "../../ternoa-pallets/bridge", default-features = false }
ternoa-nft = { path = "../../ternoa-pallets/nft", default-features = false }
ternoa-marketplace = { path = "../../ternoa-pallets/marketplace", default-features = false }
ternoa-auction = { path = "../../ternoa-pallets/auction", default-features = false }
ternoa-rent = { path = "../../ternoa-pallets/rent", default-features = false }
ternoa-tee = { path = "../../ternoa-pallets/tee", default-features = false }
ternoa-transmission-protocols = { path = "../../ternoa-pallets/transmission-protocols", default-features = false }

[build-dependencies]
substrate-wasm-builder = { workspace = true }

[features]
default = ["std"]
std = [
	# Ternoa
	"ternoa-core-primitives/std",
	"ternoa-runtime-common/std",
	"ternoa-mandate/std",
	"ternoa-staking-rewards/std",
	"ternoa-bridge/std",
	"ternoa-nft/std",
	"ternoa-marketplace/std",
	"ternoa-auction/std",
	"ternoa-rent/std",
	"ternoa-tee/std",
	"ternoa-transmission-protocols/std",
	# Substrate
	"parity-scale-codec/std",
	"frame-election-provider-support/std",
	"frame-executive/std",
	"frame-support/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-benchmarking?/std",
	"pallet-authority-discovery/std",
	"pallet-authorship/std",
	"pallet-babe/std",
	"pallet-bags-list/std",
	"pallet-balances/std",
	"pallet-election-provider-multi-phase/std",
	"pallet-grandpa/std",
	"pallet-im-online/std",
	"pallet-offences/std",
	"pallet-offences-benchmarking?/std",
	"pallet-preimage/std",
	"pallet-session/std",
	"pallet-session-benchmarking?/std",
	"pallet-staking/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"pallet-treasury/std",
	"pallet-utility/std",
	"scale-info/std",
	"serde",
	"sp-api/std",
	"sp-authority-discovery/std",
	"sp-block-builder/std",
	"sp-consensus-babe/std",
	"sp-core/std",
	"sp-inherents/std",
	"sp-npos-elections/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-staking/std",
	"sp-std/std",
	"sp-tracing/std",
	"sp-transaction-pool/std",
	"sp-version/std",
	"frame-try-runtime?/std",
	"pallet-collective/std",
	"pallet-membership/std",
	"pallet-scheduler/std",
	"pallet-democracy/std",
	"pallet-elections-phragmen/std",
	"pallet-multisig/std",
	"pallet-identity/std",
	"pallet-assets/std",
]

runtime-benchmarks = [
	"frame-benchmarking",
	"frame-election-provider-support/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-babe/runtime-benchmarks",
	"pallet-bags-list/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-collective/runtime-benchmarks",
	"pallet-election-provider-multi-phase/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	"pallet-im-online/runtime-benchmarks",
	"pallet-membership/runtime-benchmarks",
	"pallet-offences/runtime-benchmarks",
	"pallet-preimage/runtime-benchmarks",
	"pallet-scheduler/runtime-benchmarks",
	"pallet-session-benchmarking/runtime-benchmarks",
	"pallet-offences-benchmarking/runtime-benchmarks",
	"pallet-staking/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"pallet-treasury/runtime-benchmarks",
	"pallet-utility/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"pallet-democracy/runtime-benchmarks",
	"pallet-elections-phragmen/runtime-benchmarks",
	"pallet-multisig/runtime-benchmarks",
	"pallet-identity/runtime-benchmarks",
	"pallet-assets/runtime-benchmarks",
	# Ternoa
	"ternoa-staking-rewards/runtime-benchmarks",
	"ternoa-bridge/runtime-benchmarks",
	"ternoa-nft/runtime-benchmarks",
	"ternoa-marketplace/runtime-benchmarks",
	"ternoa-auction/runtime-benchmarks",
	"ternoa-rent/runtime-benchmarks",
	"ternoa-tee/runtime-benchmarks",
	"ternoa-transmission-protocols/runtime-benchmarks",
]

try-runtime = [
	"frame-try-runtime",
	"frame-executive/try-runtime",
	"frame-support/try-runtime",
	"frame-system/try-runtime",
	"pallet-authority-discovery/try-runtime",
	"pallet-authorship/try-runtime",
	"pallet-babe/try-runtime",
	"pallet-bags-list/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-election-provider-multi-phase/try-runtime",
	"pallet-grandpa/try-runtime",
	"pallet-im-online/try-runtime",
	"pallet-offences/try-runtime",
	"pallet-preimage/try-runtime",
	"pallet-session/try-runtime",
	"pallet-staking/try-runtime",
	# "pallet-staking-reward-curve/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"pallet-treasury/try-runtime",
	"pallet-utility/try-runtime",
	"pallet-collective/try-runtime",
	"pallet-membership/try-runtime",
	"pallet-scheduler/try-runtime",
	"pallet-democracy/try-runtime",
	"pallet-elections-phragmen/try-runtime",
	"pallet-multisig/try-runtime",
	"pallet-identity/try-runtime",
	"pallet-assets/try-runtime",
	# Ternoa
	"ternoa-mandate/try-runtime",
	"ternoa-staking-rewards/try-runtime",
	"ternoa-bridge/try-runtime",
	"ternoa-nft/try-runtime",
	"ternoa-marketplace/try-runtime",
	"ternoa-auction/try-runtime",
	"ternoa-rent/try-runtime",
	"ternoa-tee/try-runtime",
	"ternoa-transmission-protocols/try-runtime",
]