//! Autogenerated weights for `pallet_bags_list`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ternoa-Recommended-Reference-Machine`, CPU: `AMD EPYC 7281 16-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("mainnet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/ternoa
// benchmark
// pallet
// --chain=mainnet-dev
// --steps=50
// --repeat=20
// --pallet=pallet_bags_list
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{RefTimeWeight, Weight}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_bags_list`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bags_list::WeightInfo for WeightInfo<T> {
        // Storage: Staking Bonded (r:1 w:0)
        // Storage: Staking Ledger (r:1 w:0)
        // Storage: BagsList ListNodes (r:4 w:4)
        // Storage: BagsList ListBags (r:1 w:1)
        fn rebag_non_terminal() -> Weight {
                Weight::from_ref_time(212_381_000 as RefTimeWeight)
                        .saturating_add(T::DbWeight::get().reads(7 as RefTimeWeight))
                        .saturating_add(T::DbWeight::get().writes(5 as RefTimeWeight))
        }
        // Storage: Staking Bonded (r:1 w:0)
        // Storage: Staking Ledger (r:1 w:0)
        // Storage: BagsList ListNodes (r:3 w:3)
        // Storage: BagsList ListBags (r:2 w:2)
        fn rebag_terminal() -> Weight {
                Weight::from_ref_time(210_247_000 as RefTimeWeight)
                        .saturating_add(T::DbWeight::get().reads(7 as RefTimeWeight))
                        .saturating_add(T::DbWeight::get().writes(5 as RefTimeWeight))
        }
        // Storage: BagsList ListNodes (r:4 w:4)
        // Storage: Staking Bonded (r:2 w:0)
        // Storage: Staking Ledger (r:2 w:0)
        // Storage: BagsList CounterForListNodes (r:1 w:1)
        // Storage: BagsList ListBags (r:1 w:1)
        fn put_in_front_of() -> Weight {
                Weight::from_ref_time(148_971_000 as RefTimeWeight)
                        .saturating_add(T::DbWeight::get().reads(10 as RefTimeWeight))
                        .saturating_add(T::DbWeight::get().writes(6 as RefTimeWeight))
        }
}
