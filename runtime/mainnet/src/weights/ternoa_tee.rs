
//! Autogenerated weights for `ternoa_tee`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ternoa-Recommended-Reference-Machine`, CPU: `AMD EPYC 7281 16-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("alphanet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/ternoa
// benchmark
// pallet
// --chain=alphanet-dev
// --steps=50
// --repeat=20
// --pallet=ternoa_tee
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `ternoa_tee`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> ternoa_tee::WeightInfo for WeightInfo<T> {
	// Storage: Tee EnclaveIndex (r:1 w:1)
	// Storage: Tee EnclaveIdGenerator (r:1 w:1)
	// Storage: Tee EnclaveRegistry (r:0 w:1)
	fn register_enclave() -> Weight {
		Weight::from_ref_time(10_000_000 as u64)
	}

	fn unregister_enclave() -> Weight {
		Weight::from_ref_time(10_000_000 as u64)
	}

	// Storage: Tee EnclaveIndex (r:1 w:0)
	// Storage: Tee EnclaveRegistry (r:1 w:1)
	fn update_enclave() -> Weight {
		Weight::from_ref_time(10_000_000 as u64)
	}
	
	// Storage: Tee EnclaveUpdates (r:1 w:1)
	fn cancel_update() -> Weight {
		Weight::from_ref_time(10_000_000 as u64)
	}

	// Storage: Tee EnclaveIndex (r:1 w:0)
	// Storage: Tee ClusterIndex (r:1 w:1)
	// Storage: Tee ClusterRegistry (r:1 w:1)
	fn assign_enclave() -> Weight {
		Weight::from_ref_time(10_000_000 as u64)
	}

	// Storage: Tee EnclaveIndex (r:1 w:0)
	// Storage: Tee ClusterIndex (r:1 w:1)
	// Storage: Tee ClusterRegistry (r:1 w:1)
	fn remove_enclave() -> Weight {
		Weight::from_ref_time(10_000_000 as u64)
	}

	// TODO: Add number of storage reads when running benchmarks
	fn force_update_enclave() -> Weight {
		Weight::from_ref_time(10_000_000 as u64)
	}

	// Storage: Tee EnclaveIndex (r:1 w:0)
	// Storage: Tee ClusterIndex (r:1 w:1)
	// Storage: Tee ClusterRegistry (r:1 w:1)
	fn remove_registration() -> Weight {
		Weight::from_ref_time(10_000_000 as u64)
	}

	// Storage: Tee EnclaveIdGenerator (r:1 w:0)
	// Storage: Tee ClusterIdGenerator (r:0 w:1)
	// Storage: Tee ClusterRegistry (r:0 w:1)
	fn create_cluster() -> Weight {
		Weight::from_ref_time(10_000_000 as u64)
	}

	// Storage: Tee ClusterRegistry (r:1 w:1)
	fn remove_cluster() -> Weight {
		Weight::from_ref_time(10_000_000 as u64)
	}

	// Storage: Tee EnclaveUpdates (r:1 w:1)
	fn remove_update() -> Weight {
		Weight::from_ref_time(10_000_000 as u64)
	}
}
