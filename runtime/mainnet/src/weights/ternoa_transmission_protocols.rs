
//! Autogenerated weights for `ternoa_transmission_protocols`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Ternoa-Recommended-Reference-Machine`, CPU: `AMD EPYC 7281 16-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("mainnet-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/ternoa
// benchmark
// pallet
// --chain=mainnet-dev
// --steps=50
// --repeat=20
// --pallet=ternoa_transmission_protocols
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// ./output

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `ternoa_transmission_protocols`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> ternoa_transmission_protocols::WeightInfo for WeightInfo<T> {
	// Storage: NFT Nfts (r:1 w:1)
	// Storage: TransmissionProtocols AtBlockQueue (r:1 w:1)
	// Storage: TransmissionProtocols AtBlockFee (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: TransmissionProtocols Transmissions (r:0 w:1)
	/// The range of component `s` is `[0, 999999]`.
	fn set_transmission_protocol(s: u32, ) -> Weight {
		Weight::from_parts(162_275_000 as u64)
			// Standard Error: 124
			.saturating_add(Weight::from_parts(40_798 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: NFT Nfts (r:1 w:1)
	// Storage: TransmissionProtocols Transmissions (r:1 w:1)
	// Storage: TransmissionProtocols AtBlockQueue (r:1 w:1)
	// Storage: TransmissionProtocols OnConsentData (r:0 w:1)
	/// The range of component `s` is `[0, 999999]`.
	fn remove_transmission_protocol(s: u32, ) -> Weight {
		Weight::from_parts(92_565_000 as u64)
			// Standard Error: 310
			.saturating_add(Weight::from_parts(41_764 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: NFT Nfts (r:1 w:0)
	// Storage: TransmissionProtocols Transmissions (r:1 w:1)
	// Storage: TransmissionProtocols AtBlockQueue (r:1 w:1)
	/// The range of component `s` is `[0, 999999]`.
	fn reset_timer(s: u32, ) -> Weight {
		Weight::from_parts(111_330_000 as u64)
			// Standard Error: 288
			.saturating_add(Weight::from_parts(43_663 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: NFT Nfts (r:1 w:0)
	// Storage: TransmissionProtocols Transmissions (r:1 w:0)
	// Storage: TransmissionProtocols AtBlockQueue (r:1 w:1)
	// Storage: TransmissionProtocols OnConsentData (r:1 w:1)
	/// The range of component `s` is `[0, 999999]`.
	fn add_consent(s: u32, ) -> Weight {
		Weight::from_parts(113_495_000 as u64)
			// Standard Error: 252
			.saturating_add(Weight::from_parts(65_782 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: TransmissionProtocols AtBlockFee (r:0 w:1)
	fn set_protocol_fee() -> Weight {
		Weight::from_parts(47_570_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}
