
//! Autogenerated weights for `ternoa_associated_accounts`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-02-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/ternoa
// benchmark
// --chain
// dev
// --execution=wasm
// --wasm-execution
// compiled
// --extrinsic=*
// --pallet=ternoa_associated_accounts
// --steps=50
// --repeat=20
// --heap-pages=4096
// --output
// .

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
    fn set_account() -> Weight;
    fn add_new_supported_account() -> Weight;
    fn remove_supported_account() -> Weight;
}


/// Weight functions for `ternoa_associated_accounts`.
pub struct TernoaWeights<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for TernoaWeights<T> {
	// Storage: AssociatedAccounts SupportedAccounts (r:1 w:0)
	// Storage: AssociatedAccounts Users (r:1 w:1)
	fn set_account() -> Weight {
		(13_180_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: AssociatedAccounts SupportedAccounts (r:1 w:1)
	fn add_new_supported_account() -> Weight {
		(10_750_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: AssociatedAccounts SupportedAccounts (r:1 w:1)
	fn remove_supported_account() -> Weight {
		(10_690_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}